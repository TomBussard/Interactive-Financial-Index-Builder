import streamlit as st
import pandas as pd
import os
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import smtplib
from io import BytesIO
import zipfile
import urllib.parse
import shutil

# Titre de l'application
st.title("üìä Analyse et Cr√©ation Interactive d'Indices Financiers")

# Explication introductive
st.markdown("""
Bienvenue dans cette application interactive d√©di√©e √† l'analyse et √† la cr√©ation d'indices financiers.  
Vous pourrez explorer, filtrer, et construire des indices bas√©s sur des entreprises am√©ricaines (**SPX**) et europ√©ennes (**SXXP**) par **secteurs** et **sous-secteurs**.

### Objectifs :
1. **Analyse sectorielle** : Identifiez les entreprises pertinentes dans le secteur de votre choix.
2. **Cr√©ation d'indices** : Construisez et visualisez des indices sectoriels adapt√©s √† vos crit√®res.
3. **Comparaison avec benchmarks** : √âvaluez les performances des indices en les comparant √† des benchmarks globaux comme SPX et SXXP.

Gr√¢ce √† cette plateforme, vous pourrez √©galement explorer des indices bas√©s sur des styles d'investissement sp√©cifiques (Momentum, Solidit√© Financi√®re) pour mieux comprendre les dynamiques de march√©.

**üëâ Commencez d√®s maintenant en s√©lectionnant un secteur √† analyser via le panneau lat√©ral.**
""")

# Chargement des donn√©es avec mise en cache
@st.cache_data
def charger_donnees():
    chemin = os.path.join(os.getcwd(), 'Data projet indices python.xlsx')
    index_data = pd.read_excel(chemin, sheet_name='Index')
    forex_data = pd.read_excel(chemin, sheet_name="Forex")
    members_data = pd.read_excel(chemin, sheet_name='Members')
    spx_prices = pd.read_excel(chemin, sheet_name='SPX_PX_LAST')
    sxxp_prices = pd.read_excel(chemin, sheet_name='SXXP_PX_LAST')
    qualitativ_2018 = pd.read_excel(chemin, sheet_name="Qualitativ_2018")
    qualitativ_2019 = pd.read_excel(chemin, sheet_name="Qualitativ_2019")
    qualitativ_2020 = pd.read_excel(chemin, sheet_name="Qualitativ_2020")
    
    return {
        'index_data': index_data,
        'forex_data': forex_data,
        'members_data': members_data,
        'spx_prices': spx_prices,
        'sxxp_prices': sxxp_prices,
        'qualitativ_2018': qualitativ_2018,
        'qualitativ_2019': qualitativ_2019,
        'qualitativ_2020': qualitativ_2020,
    }

# Charger les donn√©es
donnees = charger_donnees()

def dataframe_to_image(df, filename, decimals=2):
    """
    Convertit un DataFrame en image PNG et l'enregistre avec le nom sp√©cifi√©.

    Args:
        df (pd.DataFrame): Le DataFrame √† convertir.
        filename (str): Le chemin du fichier PNG de sortie.
        decimals (int): Nombre de d√©cimales pour arrondir les valeurs num√©riques.
    """
    # Arrondir les valeurs num√©riques
    df_rounded = df.round(decimals)

    # Cr√©ation de l'image
    fig, ax = plt.subplots(figsize=(min(15, 5 + 0.5 * len(df_rounded.columns)), 0.5 * len(df_rounded) + 1))
    ax.axis('off')  # Pas d'axes
    ax.axis('tight')
    table = ax.table(cellText=df_rounded.values, colLabels=df_rounded.columns, cellLoc='center', loc='center')
    table.auto_set_font_size(False)
    table.set_fontsize(10)
    table.auto_set_column_width(col=list(range(len(df_rounded.columns))))  # Ajuste la largeur des colonnes

    plt.savefig(filename, format='png', bbox_inches='tight')
    plt.close(fig)


# Fonction pour sauvegarder un graphique en PNG
def save_figure(fig, filename):
    """
    Enregistre un graphique en PNG avec le nom sp√©cifi√©.
    """
    temp_dir = "temp_reports"
    os.makedirs(temp_dir, exist_ok=True)
    filepath = os.path.join(temp_dir, filename)
    fig.savefig(filepath, format="png", bbox_inches="tight")
    plt.close(fig)

# Fonction pour sauvegarder un fichier ZIP avec tous les r√©sultats
def create_zip():
    """
    Cr√©e un fichier ZIP contenant tous les fichiers enregistr√©s dans le r√©pertoire temporaire.
    """
    temp_dir = "temp_reports"
    zip_buffer = BytesIO()
    with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zf:
        for root, _, files in os.walk(temp_dir):
            for file in files:
                zf.write(os.path.join(root, file), arcname=file)
    return zip_buffer

# Nettoyer le dossier temporaire au d√©marrage
def clear_temp_folder(temp_dir="temp_reports"):
    """
    Supprime le contenu du dossier temporaire s'il existe.
    """
    if os.path.exists(temp_dir):
        for root, dirs, files in os.walk(temp_dir):
            for file in files:
                try:
                    os.unlink(os.path.join(root, file))  # Supprime les fichiers
                except PermissionError:
                    print(f"Impossible de supprimer le fichier : {file}. Il est en cours d'utilisation.")
        shutil.rmtree(temp_dir, ignore_errors=True)  # Supprime le dossier
    os.makedirs(temp_dir, exist_ok=True)  # Recr√©e un dossier vide

# Appel de la fonction au d√©marrage
clear_temp_folder()

# Section Indice Sectoriel
st.title("üìà Cr√©ation d'un Indice Sectoriel")

st.markdown("""
Les indices sectoriels sont des outils essentiels pour analyser les performances des entreprises appartenant √† des secteurs √©conomiques sp√©cifiques.  
Ils permettent d‚Äô√©valuer les dynamiques sectorielles, d‚Äôidentifier les tendances cl√©s et de mieux comprendre les moteurs de performance des march√©s financiers.

### Objectif de cette analyse
Dans cette section, nous allons construire un **indice sectoriel** en filtrant et pond√©rant les entreprises am√©ricaines (**SPX**) et europ√©ennes (**SXXP**) d‚Äôun secteur choisi.  
Cet indice permettra de :
1. Analyser la performance des entreprises au sein d‚Äôun secteur sp√©cifique.
2. Comparer les dynamiques sectorielles entre les march√©s am√©ricains et europ√©ens.
3. Cr√©er une base d‚Äô√©tude pour des strat√©gies d‚Äôinvestissement sp√©cifiques.

### M√©thodologie
1. **Filtrage par secteur** : 
   - S√©lection des entreprises bas√©es sur des secteurs et sous-secteurs d√©finis.  
   - Analyse des entreprises disponibles dans les indices SPX et SXXP.
2. **Traitement des donn√©es** :
   - Nettoyage et pr√©paration des donn√©es historiques de prix pour garantir leur qualit√© et leur coh√©rence.
   - Conversion des donn√©es europ√©ennes (SXXP) en USD pour assurer une base de comparaison homog√®ne.
3. **Pond√©ration par capitalisation boursi√®re** : 
   - Les entreprises s√©lectionn√©es sont pond√©r√©es en fonction de leur capitalisation boursi√®re, refl√©tant leur poids relatif dans le secteur.
4. **Cr√©ation de l'indice** :
   - Les prix des entreprises sont normalis√©s sur une base de 100 pour faciliter la comparaison.  
   - Une s√©rie temporelle est construite pour repr√©senter l‚Äô√©volution de l‚Äôindice sectoriel au fil du temps.
5. **Benchmarking** :
   - L‚Äôindice sectoriel sera compar√© √† des benchmarks globaux comme le SPX (march√© am√©ricain) et le SXXP (march√© europ√©en en USD).

### Pourquoi un indice sectoriel ?
Les indices sectoriels permettent de mieux comprendre les performances d‚Äôun secteur donn√©, en mettant en √©vidence :
- Les secteurs moteurs de la croissance √©conomique.
- Les impacts de facteurs macro√©conomiques ou g√©opolitiques sur des secteurs sp√©cifiques.
- Les opportunit√©s d‚Äôinvestissement √† l‚Äôint√©rieur d‚Äôun secteur particulier.

### R√©sultat attendu
L‚Äôindice sectoriel ainsi construit nous permettra de visualiser :
- L'√©volution des performances d‚Äôun secteur donn√© sur une p√©riode sp√©cifique.
- Une comparaison avec les benchmarks pour √©valuer les performances relatives des entreprises du secteur.
- Une base solide pour des analyses plus approfondies, comme le rebalancement d‚Äôindice ou l‚Äôidentification de sous-secteurs porteurs.

### Suivez les √©tapes interactives
- Commencez par s√©lectionner un **secteur** et des **sous-secteurs** via le panneau lat√©ral.
- Explorez les donn√©es des entreprises disponibles.
- Construisez et visualisez l‚Äôindice sectoriel pour analyser ses performances.
""")

# Gestion des donn√©es manquantes ou erreurs
if 'members_data' not in donnees or donnees['members_data'] is None:
    st.error("Les donn√©es 'Members' ne sont pas disponibles. V√©rifiez le fichier Excel.")
    st.stop()

members_data = donnees['members_data']
spx_prices = donnees.get('spx_prices', None)
sxxp_prices = donnees.get('sxxp_prices', None)

if spx_prices is None or sxxp_prices is None:
    st.error("Les donn√©es de prix pour SPX ou SXXP ne sont pas disponibles. V√©rifiez le fichier Excel.")
    st.stop()

# Liste unique des secteurs disponibles
secteurs_disponibles = members_data['BICS_LEVEL_1_SECTOR_NAME'].dropna().unique()

# S√©lection du secteur par l'utilisateur
st.sidebar.header("üîç Filtrer par secteur")
secteur_choisi = st.sidebar.selectbox("Choisissez un secteur :", options=secteurs_disponibles)

# Filtrer les entreprises par secteur choisi
entreprises_filtrees = members_data[members_data['BICS_LEVEL_1_SECTOR_NAME'] == secteur_choisi]

# Liste unique des sous-secteurs disponibles pour le secteur choisi
sous_secteurs_disponibles = entreprises_filtrees['SPX_BICS_LEVEL_4_SUB_INDUSTRY_NAME'].dropna().unique()

# S√©lection des sous-secteurs
sous_secteurs_choisis = st.sidebar.multiselect("S√©lectionnez les sous-secteurs :", options=sous_secteurs_disponibles)

# Filtrer les entreprises par sous-secteurs choisis
if sous_secteurs_choisis:
    entreprises_filtrees = entreprises_filtrees[
        entreprises_filtrees['SPX_BICS_LEVEL_4_SUB_INDUSTRY_NAME'].isin(sous_secteurs_choisis)
    ]

# Afficher les r√©sultats filtr√©s
st.subheader(f"üìä Entreprises filtr√©es pour le secteur '{secteur_choisi}'")
st.write("**Entreprises s√©lectionn√©es :**")
st.dataframe(entreprises_filtrees)

# Affichage des tickers uniques pour SPX et SXXP
spx_tickers = entreprises_filtrees['SPX Index'].dropna().unique()
sxxp_tickers = entreprises_filtrees['SXXP Index'].dropna().unique()

st.write("**Tickers am√©ricains (SPX) :**", spx_tickers)
st.write("**Tickers europ√©ens (SXXP) :**", sxxp_tickers)

# Fonction pour filtrer les prix
def filter_prices(sheet_prices, tickers, start_date, end_date, max_consecutive_nans=10, min_valid_ratio=0.5, verbose=False):
    """
    Filtre les prix pour les tickers donn√©s et dans une plage de dates sp√©cifi√©e.
    Inclut uniquement les colonnes qui respectent les crit√®res :
    - Proportion minimale de donn√©es valides.
    - Nombre maximal de NaN cons√©cutifs.
    """
    sheet_prices['Dates'] = pd.to_datetime(sheet_prices['Dates'])

    # Filtrer par plage de dates
    filtered_prices = sheet_prices[
        (sheet_prices['Dates'] >= pd.to_datetime(start_date)) & 
        (sheet_prices['Dates'] <= pd.to_datetime(end_date))
    ].copy()

    columns = ['Dates']  # Colonne Dates incluse
    excluded_tickers = []  # Liste des tickers exclus

    for ticker in tickers:
        if ticker in filtered_prices.columns:
            # V√©rifier la proportion de donn√©es valides
            valid_data_ratio = filtered_prices[ticker].notna().sum() / len(filtered_prices[ticker])

            # Exclure les tickers avec trop peu de donn√©es valides
            if valid_data_ratio < min_valid_ratio:
                excluded_tickers.append((ticker, f"Moins de {min_valid_ratio * 100}% de donn√©es valides"))
                if verbose:
                    st.write(f"‚ùå {ticker} exclu - Raison : Moins de {min_valid_ratio * 100}% de donn√©es valides")
                continue

            # V√©rifier les NaN cons√©cutifs
            nan_count = filtered_prices[ticker].isna().astype(int).rolling(window=max_consecutive_nans).sum()
            if (nan_count >= max_consecutive_nans).any():
                excluded_tickers.append((ticker, f"Plus de {max_consecutive_nans} NaN cons√©cutifs"))
                if verbose:
                    st.write(f"‚ùå {ticker} exclu - Raison : Plus de {max_consecutive_nans} NaN cons√©cutifs")
                continue

            # Ajoute le ticker s'il respecte les crit√®res
            columns.append(ticker)

    # Filtrer les colonnes valides
    filtered_prices = filtered_prices[columns]

    # Remplir les NaN restants par des valeurs connues (forward et backward fill)
    filtered_prices = filtered_prices.fillna(method='ffill').fillna(method='bfill')

    if verbose:
        st.write(f"‚úÖ Nombre d'entreprises incluses : {len(columns) - 1}")
        st.write(f"‚ùå Tickers exclus ({len(excluded_tickers)}) : {excluded_tickers}")

    return filtered_prices, excluded_tickers

# S√©lection des dates interactives
st.subheader("üìà Construction de l'indice sur la base des prix")

start_date = st.date_input("Date de d√©but", value=pd.to_datetime('2010-04-01'), key="start_date")
end_date = st.date_input("Date de fin", value=pd.to_datetime('2018-12-28'), key="end_date")


# Application de la fonction pour SPX
spx_energy_prices, spx_excluded = filter_prices(spx_prices, spx_tickers, start_date, end_date)
sxxp_energy_prices, sxxp_excluded = filter_prices(sxxp_prices, sxxp_tickers, start_date, end_date)

# Affichage des r√©sultats pour SPX
st.subheader("Prix filtr√©s pour SPX")
with st.expander("Afficher les colonnes exclues pour SPX"):
    st.write("**Colonnes exclues pour SPX :**", spx_excluded)
with st.expander("Afficher les prix filtr√©s pour SPX"):
    st.dataframe(spx_energy_prices)

# Affichage des r√©sultats pour SXXP
st.subheader("Prix filtr√©s pour SXXP")
with st.expander("Afficher les colonnes exclues pour SXXP"):
    st.write("**Colonnes exclues pour SXXP :**", sxxp_excluded)
with st.expander("Afficher les prix filtr√©s pour SXXP"):
    st.dataframe(sxxp_energy_prices)


# Fonction pour convertir les prix SXXP en dollars
def convert_usd(index_prices, forex_data):
    """
    Convertit les prix SXXP en dollars en utilisant le taux de change EUR/USD correspondant √† chaque date.
    """
    # Formatage des dates
    index_prices['Dates'] = pd.to_datetime(index_prices['Dates'])
    forex_data['Dates'] = pd.to_datetime(forex_data['Dates'])

    # Fusion √† gauche sur les dates
    merged_data = pd.merge(index_prices, forex_data[['Dates', 'EURUSD']], on='Dates', how='left')

    # V√©rification des taux de change manquants
    if merged_data['EURUSD'].isna().any():
        st.warning("Certaines dates n'ont pas de taux de change correspondant.")

    # Conversion des prix
    numeric_cols = merged_data.select_dtypes(include='number').columns.drop('EURUSD')
    for col in numeric_cols:
        merged_data[col] = merged_data[col] * merged_data['EURUSD']

    # Suppression de la colonne EURUSD
    merged_data.drop(columns=['EURUSD'], inplace=True)

    return merged_data

# Fonction pour fusionner les prix SPX et SXXP
def merge_dates(spx_prices, sxxp_prices):
    """
    Fusionne deux DataFrames sur les dates communes.
    """
    # Formatage des dates
    spx_prices['Dates'] = pd.to_datetime(spx_prices['Dates'])
    sxxp_prices['Dates'] = pd.to_datetime(sxxp_prices['Dates'])

    # Fusion sur les dates
    merged_data_frame = pd.merge(spx_prices, sxxp_prices, on="Dates", how="inner")

    return merged_data_frame

# Conversion des prix SXXP en dollars
st.subheader("üíµ Conversion des prix SXXP en dollars")
forex_data = donnees['forex_data']
sxxp_energy_prices_usd = convert_usd(sxxp_energy_prices, forex_data)
st.write("**Prix SXXP convertis en dollars :**")
st.dataframe(sxxp_energy_prices_usd)

# Fusion des donn√©es pour cr√©er l'indice
st.subheader("üìä Fusion des prix SPX et SXXP pour l'indice")
index_energy_prices = merge_dates(spx_energy_prices, sxxp_energy_prices_usd)
st.write(f"**Donn√©es fusionn√©es de l'indice '{secteur_choisi}' :**")
st.dataframe(index_energy_prices)

st.subheader("üí± Conversion des prix en d'autres devises")
st.markdown("""
Nous allons cr√©er une fonction interactive qui permet de convertir un DataFrame des prix en dollars 
dans d'autres devises rapidement. Vous pourrez choisir la devise cible gr√¢ce √† une liste interactive.
""")

# Fonction pour convertir les prix en dollars dans une autre devise
def convert_usd_currency(prices_df, forex_data):
    """
    Convertit les prix en dollars dans une devise choisie.
    prices_df: DataFrame contenant les prix, avec une premi√®re colonne 'Dates' et les colonnes suivantes pour les prix en USD.
    """
    prices_df['Dates'] = pd.to_datetime(prices_df['Dates'])
    forex_data['Dates'] = pd.to_datetime(forex_data['Dates'])

    # Dictionnaire des devises et leurs colonnes de taux de change
    currency_options = {
        'GBP': 'USDGBP',
        'JPY': 'USDJPY',
        'CNY': 'USDCNY',
        'CAD': 'USDCAD',
        'EUR': 'EURUSD'
    }

    def convert(target_currency):
        """
        Sous-fonction pour effectuer la conversion selon la devise s√©lectionn√©e.
        """
        if target_currency not in currency_options:
            raise ValueError(f"Devise cible '{target_currency}' non support√©e. Choisissez parmi {list(currency_options.keys())}.")

        rate_column = currency_options[target_currency]

        # V√©rification de la disponibilit√© du taux de change
        if rate_column not in forex_data.columns:
            raise ValueError(f"La colonne '{rate_column}' est absente de forex_data.")

        # Fusion avec les taux de change
        merged_data = pd.merge(prices_df, forex_data[['Dates', rate_column]], on='Dates', how='left')

        # V√©rification des donn√©es manquantes
        if merged_data[rate_column].isna().any():
            st.warning(f"Certaines dates n'ont pas de taux de change pour '{rate_column}'.")

        # Conversion des prix
        for col in merged_data.columns[1:-1]:  # Exclure 'Dates' et 'rate_column'
            if target_currency == 'EUR':  # Conversion USD -> EUR
                merged_data[col] = merged_data[col] / merged_data[rate_column]
            else:  # Conversion USD -> Autres devises
                merged_data[col] = merged_data[col] * merged_data[rate_column]

        # Suppression de la colonne des taux de change
        merged_data.drop(columns=[rate_column], inplace=True)

        return merged_data

    # Liste interactive
    target_currency = st.selectbox("S√©lectionnez une devise cible :", list(currency_options.keys()))
    converted_df = convert(target_currency)
    st.write(f"**Conversion effectu√©e vers la devise : {target_currency}**")
    st.dataframe(converted_df)

    return converted_df

# Application de la conversion
forex_data = donnees['forex_data']
converted_prices = convert_usd_currency(index_energy_prices, forex_data)

# Explication pour normalisation
st.subheader("üìè Normalisation des prix")
st.markdown("""
En continuant avec les prix en dollars, nous allons cr√©er une fonction r√©utilisable 
pour normaliser les prix des titres sur la p√©riode.
""")

# Fonction pour normaliser les prix
def normalize_prices(dataframe):
    """
    Normalise les colonnes d'un DataFrame 
    en divisant chaque valeur par la premi√®re valeur non NaN de la colonne.
    """
    normalize_df = dataframe.copy()
    for col in normalize_df.columns:
        if col != 'Dates':
            first_value = normalize_df[col].dropna().iloc[0]
            normalize_df[col] = normalize_df[col] / first_value
    return normalize_df

# Application de la normalisation
normalized_prices = normalize_prices(index_energy_prices)
st.write("**Donn√©es normalis√©es :**")
st.dataframe(normalized_prices)

# Explication de la pond√©ration
st.subheader("üìä Calcul des pond√©rations bas√©es sur la capitalisation boursi√®re")
st.markdown("""
Nous allons associer la capitalisation boursi√®re des entreprises de notre indice avec les donn√©es qualitatives 
(**Qualitativ_2018**). Ensuite, nous calculons les pond√©rations en fonction des capitalisations pour les entreprises pr√©sentes.
""")

# Fonction pour calculer les pond√©rations
def market_cap_weights(index_prices, qualitativ_data):
    """
    Associe la capitalisation boursi√®re des entreprises avec les donn√©es qualitatives 
    et calcule les pond√©rations en fonction des capitalisations.
    """
    qualitativ_data['Ticker'] = qualitativ_data.iloc[:, 0]  # La premi√®re colonne correspond aux tickers
    tickers = index_prices.columns[1:]  # Exclue la colonne 'Dates'
    filtered_qualitativ = qualitativ_data[qualitativ_data['Ticker'].isin(tickers)]
    merged_data = filtered_qualitativ[['Ticker', 'CUR_MKT_CAP']].copy()

    # Calcul des pond√©rations
    merged_data['Weight'] = merged_data['CUR_MKT_CAP'] / merged_data['CUR_MKT_CAP'].sum()

    return merged_data[['Ticker', 'Weight']]

# Application de la fonction pour les pond√©rations
qualitativ_2018 = donnees['qualitativ_2018']
qualitativ_2019 = donnees['qualitativ_2019']
marketcap_weights = market_cap_weights(index_energy_prices, qualitativ_2018)
st.write("**Pond√©rations bas√©es sur la capitalisation boursi√®re :**")
st.dataframe(marketcap_weights)

# Explication de la construction de l'indice
st.subheader("‚öôÔ∏è Construction de l'indice sectoriel")
st.markdown("""
Nous allons maintenant construire un indice sectoriel en combinant les prix normalis√©s des entreprises 
avec les pond√©rations calcul√©es pr√©c√©demment.
""")

# Fonction pour construire l'indice sectoriel
def construct_index(prices, weights):
    """
    Construit un indice sectoriel √† partir des prix des entreprises et des pond√©rations attribu√©es √† chaque valeur.
    """
    merged_data = pd.melt(prices, id_vars=['Dates'], var_name='Ticker', value_name='Price')
    merged_data = pd.merge(merged_data, weights, on='Ticker', how='inner')
    merged_data['Weighted_Price'] = merged_data['Price'] * merged_data['Weight']

    # Calcul de la somme pond√©r√©e pour chaque date
    index = merged_data.groupby('Dates')['Weighted_Price'].sum().reset_index()
    index.rename(columns={'Weighted_Price': 'Index_Value'}, inplace=True)

    # Normalisation de l'indice (base 100)
    index['Index_Value'] = (index['Index_Value'] / index['Index_Value'].iloc[0]) * 100

    return index

# Application de la fonction pour construire l'indice
index_energy = construct_index(index_energy_prices, marketcap_weights)
st.write(f"**Indice sectoriel {secteur_choisi.lower()} construit :**")
st.dataframe(index_energy)

# Chargement des donn√©es n√©cessaires 
index_data = donnees['index_data']  # Feuille "Index"
forex_data = donnees['forex_data']  # Feuille "Forex"

# Fonction pour pr√©parer les benchmarks 
def prepare_reference_index(index_data, column_name, date_column="PX_LAST"):
    """
    Pr√©pare un indice de r√©f√©rence en s√©lectionnant les colonnes n√©cessaires,
    convertissant les dates et les valeurs.
    """
    if date_column in index_data.columns and column_name in index_data.columns:
        reference_index = index_data[[date_column, column_name]].rename(
            columns={date_column: "Dates", column_name: "Index_Value"}
        )
        reference_index['Dates'] = pd.to_datetime(reference_index['Dates'], format='%d/%m/%Y', errors='coerce')
        reference_index.dropna(subset=['Dates', 'Index_Value'], inplace=True)
        reference_index['Index_Value'] = reference_index['Index_Value'].replace(',', '.', regex=True).astype(float)
        return reference_index
    else:
        raise ValueError(f"Les colonnes '{date_column}' et/ou '{column_name}' sont absentes.")

# Pr√©pare les benchmarks 
spx_index = prepare_reference_index(index_data, "SPX Index")  # Benchmark SPX
sxxp_index = prepare_reference_index(index_data, "SXXP Index")  # Benchmark SXXP

# Convertie et normalise le benchmark SXXP en USD
sxxp_index_usd = convert_usd(sxxp_index, forex_data)  # Conversion en USD

# Fusionne les benchmarks avec l'indice sectoriel 
index_with_benchmarks = pd.merge(index_energy, spx_index, on='Dates', how='inner', suffixes=('', '_SPX'))
index_with_benchmarks = pd.merge(index_with_benchmarks, sxxp_index_usd, on='Dates', how='inner', suffixes=('', '_SXXP'))

# Fonction pour ajuster la premi√®re valeur √† 100
def adjust_to_base_100(df, columns):
    """
    Ajuste les colonnes sp√©cifi√©es d'un DataFrame pour commencer exactement √† 100.
    """
    adjusted_df = df.copy()
    for col in columns:
        first_value = adjusted_df[col].iloc[0]
        adjusted_df[col] = (adjusted_df[col] / first_value) * 100
    return adjusted_df

# Ajuste les colonnes de l'indice et des benchmarks
columns_to_adjust = ['Index_Value', 'Index_Value_SPX', 'Index_Value_SXXP']
index_with_benchmarks = adjust_to_base_100(index_with_benchmarks, columns_to_adjust)

# Visualisation
st.subheader(f"üìà Indice sectoriel '{secteur_choisi.lower()}' avec Benchmarks")
fig, ax = plt.subplots(figsize=(12, 6))

# Trace l'indice sectoriel
ax.plot(index_with_benchmarks['Dates'], index_with_benchmarks['Index_Value'], label=f"Indice Sectoriel '{secteur_choisi}'", linewidth=2, color="blue")

# Trace le benchmark SPX
ax.plot(index_with_benchmarks['Dates'], index_with_benchmarks['Index_Value_SPX'], label="Benchmark SPX", linestyle="--", color="orange")

# Trace le benchmark SXXP
ax.plot(index_with_benchmarks['Dates'], index_with_benchmarks['Index_Value_SXXP'], label="Benchmark SXXP (en USD)", linestyle=":", color="green")

# Configurations du graphique
ax.set_title(f"Indice Sectoriel '{secteur_choisi}' avec Benchmarks (Normalis√©s √† 100)", fontsize=16)
ax.set_xlabel("Dates", fontsize=12)
ax.set_ylabel("Valeur Normalis√©e (Base 100)", fontsize=12)
ax.legend(fontsize=12)
ax.grid(True, linestyle='--', alpha=0.6)

# Sauvegarde automatique dans le r√©pertoire temporaire
save_figure(fig, f"indice_sectoriel_{secteur_choisi.lower().replace(' ', '_')}_avec_benchmark.png")

# Affiche le graphique
st.pyplot(fig)

# Fonction pour construire un indice par pays
def construct_index_pays(prices, weights, qualitativ_data):
    """
    Construit un indice sectoriel en fonction des pays s√©lectionn√©s dans une interface interactive.
    """
    ticker_column = weights.columns[0]

    # Liste des options de pays
    country_options = ['All'] + qualitativ_data['COUNTRY'].dropna().unique().tolist()

    # S√©lection multiple interactive des pays
    selected_countries = st.multiselect(
        "S√©lectionnez les pays pour filtrer l'indice :",
        options=country_options,
        default=['All']
    )

    # Filtrage des pays
    if 'All' in selected_countries:
        filtered_weights = weights
    else:
        ticker_countries = qualitativ_data[[qualitativ_data.columns[0], 'COUNTRY']]
        filtered_weights = pd.merge(
            weights,
            ticker_countries,
            left_on=ticker_column,
            right_on=qualitativ_data.columns[0],
            how='inner'
        )
        filtered_weights = filtered_weights[filtered_weights['COUNTRY'].isin(selected_countries)]

    # V√©rification des donn√©es apr√®s filtrage
    if filtered_weights.empty:
        st.warning("Aucun ticker ne correspond aux pays s√©lectionn√©s.")
        return pd.DataFrame({'Dates': [], 'Index_Value': []})  # DataFrame vide

    # Fusion des pond√©rations avec les prix
    merged_data = pd.melt(prices, id_vars=['Dates'], var_name='Ticker', value_name='Price')
    merged_data = pd.merge(merged_data, filtered_weights, left_on='Ticker', right_on=ticker_column, how='inner')

    # Calcul des prix pond√©r√©s
    merged_data['Weighted_Price'] = merged_data['Price'] * merged_data[weights.columns[1]]

    # Calcul de la somme pond√©r√©e pour chaque date
    index = merged_data.groupby('Dates')['Weighted_Price'].sum().reset_index()

    # Renommer et normaliser l'indice
    index.rename(columns={'Weighted_Price': 'Index_Value'}, inplace=True)
    index['Index_Value'] = (index['Index_Value'] / index['Index_Value'].iloc[0]) * 100

    return index, selected_countries

# Application de la fonction
st.subheader("üåç Construction d'un indice sectoriel par pays")
st.markdown("""
Nous allons maintenant construire un indice sectoriel bas√© sur les prix des entreprises et les pond√©rations
attribu√©es, tout en permettant une s√©lection dynamique des pays.
""")

# Application interactive de la s√©lection des pays
index_energy_pays, selected_countries = construct_index_pays(index_energy_prices, marketcap_weights, qualitativ_2018)

# Affichage du DataFrame r√©sultant
if not index_energy_pays.empty:
    st.write("**Indice sectoriel filtr√© par pays :**")
    st.dataframe(index_energy_pays)

    # R√©ajuste les benchmarks SPX et SXXP pour commencer exactement √† 100
    spx_index_normalized = adjust_to_base_100(spx_index, ['Index_Value'])
    sxxp_index_usd_normalized = adjust_to_base_100(sxxp_index_usd, ['Index_Value'])

    # Fusionne les benchmarks normalis√©s avec l'indice sectoriel par pays
    index_with_benchmarks_pays = pd.merge(
        index_energy_pays, spx_index_normalized, on='Dates', how='inner', suffixes=('', '_SPX')
    )
    index_with_benchmarks_pays = pd.merge(
        index_with_benchmarks_pays, sxxp_index_usd_normalized, on='Dates', how='inner', suffixes=('', '_SXXP')
    )

    # R√©ajuste l'indice sectoriel par pays pour commencer √† 100
    index_with_benchmarks_pays = adjust_to_base_100(
        index_with_benchmarks_pays, ['Index_Value', 'Index_Value_SPX', 'Index_Value_SXXP']
    )

    # Visualisation 
    st.subheader(f"üìà Indice sectoriel '{secteur_choisi}' par Pays avec Benchmarks")
    fig, ax = plt.subplots(figsize=(12, 6))

    # Trace l'indice sectoriel par pays
    ax.plot(
        index_with_benchmarks_pays['Dates'],
        index_with_benchmarks_pays['Index_Value'],
        label=f"Indice Sectoriel '{secteur_choisi}' par Pays",
        linewidth=2,
        color="blue",
    )


    # Trace le benchmark SPX
    ax.plot(
        index_with_benchmarks_pays['Dates'],
        index_with_benchmarks_pays['Index_Value_SPX'],
        label="Benchmark SPX",
        linestyle="--",
        color="orange",
    )

    # Trace le benchmark SXXP
    ax.plot(
        index_with_benchmarks_pays['Dates'],
        index_with_benchmarks_pays['Index_Value_SXXP'],
        label="Benchmark SXXP (en USD)",
        linestyle=":",
        color="green",
    )

    # Configurations du graphique
    ax.set_title(f"Indice Sectoriel '{secteur_choisi}' par Pays avec Benchmarks (Normalis√©s √† 100)", fontsize=16)
    ax.set_xlabel("Dates", fontsize=12)
    ax.set_ylabel("Valeur Normalis√©e (Base 100)", fontsize=12)
    ax.legend(fontsize=12)
    ax.grid(True, linestyle='--', alpha=0.6)

    save_figure(fig, f"indice_sectoriel_{secteur_choisi.lower().replace(' ', '_')}_par_pays_avec_benchmarks.png")

    # Affiche le graphique 
    st.pyplot(fig)
else:
    st.warning("L'indice sectoriel par pays est vide. Veuillez v√©rifier les s√©lections.")

def prepare_reference_index(index_data, column_name, date_column="PX_LAST"):
    """
    Pr√©pare un indice de r√©f√©rence en s√©lectionnant les colonnes n√©cessaires,
    convertissant les dates et les valeurs, et normalisant les donn√©es.
    """
    if date_column in index_data.columns and column_name in index_data.columns:
        reference_index = index_data[[date_column, column_name]].rename(
            columns={date_column: "Dates", column_name: "Index_Value"}
        )
        reference_index['Dates'] = pd.to_datetime(reference_index['Dates'], format='%d/%m/%Y', errors='coerce')
        reference_index.dropna(subset=['Dates', 'Index_Value'], inplace=True)
        reference_index['Index_Value'] = reference_index['Index_Value'].replace(',', '.', regex=True).astype(float)
        reference_index['Index_Value'] = (reference_index['Index_Value'] / reference_index['Index_Value'].iloc[0]) * 100
        return reference_index
    else:
        st.error(f"Les colonnes '{date_column}' et/ou '{column_name}' sont absentes.")
        return None

# Charge les donn√©es
index_data = donnees['index_data']  # Chargement depuis la feuille "Index"

# Pr√©pare les indices SPX et SXXP
spx_index = prepare_reference_index(index_data, "SPX Index")
sxxp_index = prepare_reference_index(index_data, "SXXP Index")

# S√©lection interactive de l'indice de r√©f√©rence
st.subheader("üìä Calculer les statistiques d'un indice sectoriel")
risk_free_rate = st.number_input("Taux sans risque (%)", min_value=0.0, max_value=10.0, value=0.0, step=0.1) / 100
use_reference = st.checkbox("Utiliser un indice de r√©f√©rence pour l'Alpha ?", value=False)

reference_index = None
if use_reference:
    st.markdown("**S√©lectionnez un indice de r√©f√©rence** (SPX ou SXXP) pour le calcul de l'Alpha :")
    selected_reference = st.selectbox("Indice de r√©f√©rence :", options=["SPX", "SXXP"], index=0)
    if selected_reference == "SPX":
        reference_index = spx_index
    elif selected_reference == "SXXP":
        reference_index = sxxp_index

# Fonction pour calculer les statistiques principales
def stats_index(index, reference_index=None, risk_free_rate=0.0):
    """
    Calcule et affiche les statistiques principales d'un indice.

    Args:
        index (pd.DataFrame): Donn√©es de l'indice cible (avec colonnes 'Dates' et 'Index_Value').
        reference_index (pd.DataFrame, optional): Donn√©es de l'indice de r√©f√©rence (avec colonnes 'Dates' et 'Index_Value').
        risk_free_rate (float, optional): Taux sans risque pour calculer l'Alpha et le Ratio de Sharpe.

    Returns:
        tuple: (stats_df, alpha, beta, merged_data) :
               - stats_df : R√©sum√© des statistiques de l'indice
               - alpha : Valeur de l'Alpha (float)
               - beta : Valeur du B√™ta (float)
               - merged_data : Donn√©es fusionn√©es des indices cible et r√©f√©rence
    """
    if index is None or index.empty:
        st.error("Les donn√©es de l'indice sont vides ou invalides.")
        return None, None, None, None

    required_columns = ['Dates', 'Index_Value']
    if not all(col in index.columns for col in required_columns):
        st.error(f"L'indice doit contenir les colonnes suivantes : {required_columns}")
        return None, None, None, None

    try:
        # Calculs de base
        start_value = index['Index_Value'].iloc[0]
        end_value = index['Index_Value'].iloc[-1]
        total_return = ((end_value - start_value) / start_value) * 100
        annualized_return = (end_value / start_value) ** (1 / (len(index) / 252)) - 1
        volatility = index['Index_Value'].pct_change().std() * (252 ** 0.5)

        # Max Drawdown
        cumulative_returns = (1 + index['Index_Value'].pct_change()).cumprod()
        rolling_max = cumulative_returns.cummax()
        drawdown = (cumulative_returns - rolling_max) / rolling_max
        max_drawdown = drawdown.min() * 100

        # Ratio de Sharpe
        sharpe_ratio = (annualized_return - risk_free_rate) / volatility

        # Alpha et Beta (si une r√©f√©rence est fournie)
        alpha = None
        beta = None
        merged = None
        if reference_index is not None:
            merged = pd.merge(
                index[['Dates', 'Index_Value']],
                reference_index[['Dates', 'Index_Value']],
                on='Dates',
                suffixes=('_target', '_reference')
            )
            if not merged.empty:
                target_return = merged['Index_Value_target'].pct_change()
                reference_return = merged['Index_Value_reference'].pct_change()
                beta = np.cov(target_return.dropna(), reference_return.dropna())[0, 1] / np.var(reference_return.dropna())
                alpha = (annualized_return - (risk_free_rate + beta * (reference_return.mean() - risk_free_rate)))

        # R√©sum√© des statistiques
        stats_data = {
            "Valeur Initiale": [start_value],
            "Valeur Finale": [end_value],
            "Rendement Total (%)": [total_return],
            "Rendement Annualis√© (%)": [annualized_return * 100],
            "Volatilit√© Annualis√©e (%)": [volatility * 100],
            "Max Drawdown (%)": [max_drawdown],
            "Ratio de Sharpe": [sharpe_ratio],
        }
        if alpha is not None and beta is not None:
            stats_data["Alpha"] = [alpha]
            stats_data["Beta"] = [beta]

        st.write("**R√©sum√© des Statistiques de l'Indice :**")
        stats_df = pd.DataFrame(stats_data)
        st.dataframe(stats_df)

        return stats_df, alpha, beta, merged

    except Exception as e:
        st.error(f"Erreur lors du calcul des statistiques : {e}")
        return None, None, None, None


# Fonction pour analyser les statistiques principales et les Alphas/B√™tas
def analyze_statistics_and_alpha(stats_df, filename, merged_data=None, alpha_value=None, beta_value=None):
    """
    Analyse les statistiques principales et, si disponibles, les Alphas et B√™tas.

    Args:
        stats_df (pd.DataFrame): DataFrame contenant les statistiques principales calcul√©es pour l'indice.
        filename (str): Chemin du fichier pour sauvegarder les statistiques sous forme d'image.
        merged_data (pd.DataFrame, optional): Donn√©es fusionn√©es pour l'analyse Alpha/Beta.
        alpha_value (float, optional): Valeur de l'Alpha calcul√©e.
        beta_value (float, optional): Valeur du B√™ta calcul√©e.
    """
    st.subheader("üìä Analyse compl√®te des Statistiques de l'Indice")

    # Analyse des statistiques principales
    if stats_df is not None and not stats_df.empty:
        # Extraction des valeurs
        total_return = stats_df.at[0, "Rendement Total (%)"]
        annualized_return = stats_df.at[0, "Rendement Annualis√© (%)"]
        volatility = stats_df.at[0, "Volatilit√© Annualis√©e (%)"]
        max_drawdown = stats_df.at[0, "Max Drawdown (%)"]
        sharpe_ratio = stats_df.at[0, "Ratio de Sharpe"]

        # Sauvegarde des statistiques dans un fichier PNG
        dataframe_to_image(stats_df, filename)

        # Conclusions bas√©es sur les statistiques
        st.subheader("üìã Conclusions bas√©es sur les Statistiques")
        st.write("‚úîÔ∏è **Rendement Total √©lev√© :** L'indice a g√©n√©r√© plus du double de son capital initial."
                 if total_return > 100 else 
                 "‚ùå **Rendement Total faible :** L'indice a g√©n√©r√© des gains limit√©s.")
        st.write("üìà **Volatilit√© √©lev√©e :** L'indice est sujet √† des fluctuations importantes."
                 if volatility > 20 else 
                 "üìâ **Volatilit√© mod√©r√©e :** L'indice montre un bon √©quilibre entre stabilit√© et performance.")
        st.write("‚ùå **Max Drawdown √©lev√© :** L'indice a subi une perte significative par rapport √† son pic."
                 if max_drawdown < -30 else 
                 "‚úîÔ∏è **Max Drawdown faible :** L'indice est rest√© relativement stable.")
        st.write("‚úîÔ∏è **Ratio de Sharpe satisfaisant :** L'indice offre un bon √©quilibre entre risque et rendement."
                if sharpe_ratio > 1 else 
                "‚ö†Ô∏è **Ratio de Sharpe mod√©r√© :** Les rendements compensent tout juste le risque pris."
                if 0.5 <= sharpe_ratio <= 1 else 
         "‚ùå **Ratio de Sharpe faible :** Les rendements ne compensent pas suffisamment le risque.")

    else:
        st.error("‚ùå Les statistiques principales sont indisponibles.")

    # Analyse des Alphas et B√™tas
    if isinstance(merged_data, pd.DataFrame) and not merged_data.empty:
        required_columns = ['Index_Value_target', 'Index_Value_reference']
        if all(col in merged_data.columns for col in required_columns):
            # Calculs journaliers
            merged_data['Daily_Return_Target'] = merged_data['Index_Value_target'].pct_change()
            merged_data['Daily_Return_Reference'] = merged_data['Index_Value_reference'].pct_change()

            # Affichage des statistiques descriptives
            st.subheader("üìã Analyse des Alphas et B√™tas")

            if alpha_value is not None:
                st.write(f"**Alpha :** {alpha_value/100:.4f}")
            else:
                st.write("**Alpha :** Non calcul√©")

            if beta_value is not None:
                st.write(f"**Beta :** {beta_value:.4f}")
            else:
                st.write("**Beta :** Non calcul√©")

            # Conclusions bas√©es sur Alpha
            if alpha_value is not None:
                st.write("### Conclusion sur l'Alpha :")
                if alpha_value > 0:
                    st.write("‚úîÔ∏è **Alpha positif :** L'indice cible surperforme l'indice de r√©f√©rence apr√®s ajustement pour le risque.")
                elif alpha_value < 0:
                    st.write("‚ùå **Alpha n√©gatif :** L'indice cible sous-performe l'indice de r√©f√©rence apr√®s ajustement pour le risque.")
                else:
                    st.write("‚öñÔ∏è **Alpha nul :** L'indice cible a une performance √©quivalente √† celle de l'indice de r√©f√©rence apr√®s ajustement pour le risque.")
            else:
                st.warning("‚ö†Ô∏è L'Alpha n'est pas disponible pour cette analyse.")

            # Conclusions bas√©es sur Beta
            if beta_value is not None:
                st.write("### Conclusion sur le Beta :")
                if beta_value > 1:
                    st.write("üìà **Beta > 1 :** L'indice cible est plus volatil que l'indice de r√©f√©rence.")
                elif beta_value < 1:
                    st.write("üìâ **Beta < 1 :** L'indice cible est moins volatil que l'indice de r√©f√©rence.")
                else:
                    st.write("üîÑ **Beta ‚âà 1 :** L'indice cible suit de pr√®s la volatilit√© de l'indice de r√©f√©rence.")
            else:
                st.warning("‚ö†Ô∏è Le Beta n'est pas disponible pour cette analyse.")


            # Graphique des rendements compar√©s
            st.subheader("üìà Comparaison des Rendements Journaliers")
            fig, ax = plt.subplots(figsize=(10, 5))
            ax.plot(merged_data['Dates'], merged_data['Daily_Return_Target'], label='Rendements Cible', alpha=0.7)
            ax.plot(merged_data['Dates'], merged_data['Daily_Return_Reference'], label='Rendements R√©f√©rence', alpha=0.7)
            ax.set_title("Comparaison des Rendements Journaliers", fontsize=14)
            ax.set_xlabel("Dates", fontsize=12)
            ax.set_ylabel("Rendements (%)", fontsize=12)
            ax.grid(True, linestyle='--', alpha=0.6)
            ax.legend(fontsize=12)
            st.pyplot(fig)
        else:
            st.warning("‚ö†Ô∏è Les colonnes n√©cessaires pour l'analyse Alpha/Beta sont absentes des donn√©es fusionn√©es.")
    else:
        st.warning("‚ö†Ô∏è Les donn√©es pour l'analyse Alpha/Beta sont indisponibles.")

# Appel de l'analyse d√©taill√©e avec conclusion compl√®te
if reference_index is not None:
    stats_df, alpha, beta, merged_data = stats_index(
        index_energy, reference_index=reference_index, risk_free_rate=risk_free_rate
    )
    if stats_df is not None:
        # D√©finit un fichier unique pour enregistrer les statistiques
        stats_filename_reference = f"temp_reports/Statistiques_Indice_{secteur_choisi.lower().replace(' ', '_')}.png"

        analyze_statistics_and_alpha(
            stats_df=stats_df,
            filename=stats_filename_reference,
            merged_data=merged_data,
            alpha_value=alpha * 100 if alpha is not None else None,
            beta_value=beta if beta is not None else None
        )
    else:
        st.warning("‚ùó Les statistiques principales ou les Alphas/B√™tas n'ont pas pu √™tre calcul√©s pour les donn√©es fournies.")
else:
    st.warning("‚ö†Ô∏è Aucun indice de r√©f√©rence s√©lectionn√©. Analyse des Alphas et B√™tas ignor√©e.")

# Titre principal
st.title("üõ†Ô∏è Rebalancement d'un Indice Sectoriel")
st.markdown("""
Dans cette section, nous allons aborder le **rebalancement interactif de l'indice sectoriel**.
Vous pouvez s√©lectionner une ann√©e pour effectuer le traitement des prix, le rebalancement, et analyser les statistiques associ√©es.
""")

# Fonction pour traiter les prix pour une ann√©e donn√©e
def process_prices_year(spx_prices, sxxp_prices, spx_tickers, sxxp_tickers, forex_data, year):
    spx_prices['Dates'] = pd.to_datetime(spx_prices['Dates'])
    sxxp_prices['Dates'] = pd.to_datetime(sxxp_prices['Dates'])

    # Filtre les donn√©es pour l'ann√©e sp√©cifi√©e
    spx_year_data = spx_prices[(spx_prices['Dates'] >= f"{year}-01-01") & (spx_prices['Dates'] <= f"{year}-12-31")]
    sxxp_year_data = sxxp_prices[(sxxp_prices['Dates'] >= f"{year}-01-01") & (sxxp_prices['Dates'] <= f"{year}-12-31")]

    # D√©termine les plages de dates communes
    start_date = max(spx_year_data['Dates'].min(), sxxp_year_data['Dates'].min())
    end_date = min(spx_year_data['Dates'].max(), sxxp_year_data['Dates'].max())

    # Filtre les donn√©es et applique les transformations
    spx_filtered, _ = filter_prices(spx_prices, spx_tickers, start_date, end_date)
    sxxp_filtered, _ = filter_prices(sxxp_prices, sxxp_tickers, start_date, end_date)
    sxxp_usd = convert_usd(sxxp_filtered, forex_data)
    combined_prices = merge_dates(spx_filtered, sxxp_usd)
    normalized_prices = normalize_prices(combined_prices)

    return normalized_prices

def rebalance_index(previous_index, processed_prices, qualitativ_data):
    """
    Rebalance l'indice en assurant la continuit√© avec l'ann√©e pr√©c√©dente.
    
    Args:
    - previous_index (pd.DataFrame): L'indice pr√©c√©dent.
    - processed_prices (pd.DataFrame): Les prix trait√©s pour l'ann√©e en cours.
    - qualitativ_data (pd.DataFrame): Donn√©es qualitatives (pond√©rations des tickers).
    
    Returns:
    - pd.DataFrame: Indice rebalanc√©.
    """
    weights = market_cap_weights(processed_prices, qualitativ_data)
    tickers = processed_prices.columns[1:]  # Exclure la colonne Dates

    # V√©rifie que les pond√©rations couvrent tous les tickers
    if set(weights['Ticker']) != set(tickers):
        missing_tickers = set(tickers) - set(weights['Ticker'])
        st.error(f"Les tickers suivants manquent dans les pond√©rations : {missing_tickers}")
        raise ValueError("Pond√©rations manquantes pour certains tickers.")

    # Calcul des valeurs rebalanc√©es
    index_values = (processed_prices.iloc[:, 1:] * weights['Weight'].values).sum(axis=1)

    # Normalisation par rapport √† la derni√®re valeur de l'indice pr√©c√©dent
    last_value_previous = previous_index['Index_Value'].iloc[-1]
    normalized_index_values = (index_values / index_values.iloc[0]) * last_value_previous

    # Cr√©ation du DataFrame rebalanc√©
    rebalanced_index = pd.DataFrame({
        'Dates': processed_prices['Dates'],
        'Index_Value': normalized_index_values
    })

    # Concat√©ner avec l'indice pr√©c√©dent
    return pd.concat([previous_index, rebalanced_index]).reset_index(drop=True)


def rebalance_multiple_years(
    initial_index, end_year, spx_prices, sxxp_prices, spx_tickers, sxxp_tickers, forex_data, qualitativ_data_by_year
):
    """
    Rebalance l'indice sectoriel successivement pour toutes les ann√©es jusqu'√† l'ann√©e s√©lectionn√©e.
    
    Args:
    - initial_index (pd.DataFrame): L'indice initial avant le rebalancement.
    - end_year (int): Ann√©e s√©lectionn√©e pour le rebalancement.
    - spx_prices, sxxp_prices (pd.DataFrame): Donn√©es des prix SPX et SXXP.
    - spx_tickers, sxxp_tickers (list): Tickers des indices SPX et SXXP.
    - forex_data (pd.DataFrame): Donn√©es Forex pour la conversion des devises.
    - qualitativ_data_by_year (dict): Donn√©es qualitatives par ann√©e.
    
    Returns:
    - pd.DataFrame: Indice sectoriel rebalanc√©.
    """
    index = initial_index.copy()
    start_year = index['Dates'].iloc[-1].year + 1  # Premi√®re ann√©e non encore rebalanc√©e

    for year in range(start_year, end_year + 1):

        # R√©cup√©re les prix pour l'ann√©e
        prices_for_year = process_prices_year(spx_prices, sxxp_prices, spx_tickers, sxxp_tickers, forex_data, year)
        qualitativ_for_year = qualitativ_data_by_year.get(year)

        if prices_for_year.empty:
            # Passe l'ann√©e si les donn√©es sont manquantes
            continue

        # Applique le rebalancement pour l'ann√©e
        index = rebalance_index(index, prices_for_year, qualitativ_for_year)

    return index

# Charger les donn√©es qualitatives par ann√©e 
qualitativ_data_by_year = {}
available_years = [2019, 2020] 

for year in available_years:
    try:
        qualitativ_data_by_year[year] = donnees[f'qualitativ_{year}'] 
    except KeyError:
        st.warning(f"Les donn√©es qualitatives pour l'ann√©e {year} ne sont pas disponibles.")
        qualitativ_data_by_year[year] = None  

# Interface Interactive 
st.subheader("‚öñÔ∏è Rebalancement Dynamique de l'Indice")
selected_year = st.selectbox(
    "Choisissez une ann√©e pour le rebalancement :",
    options=range(2010, 2021),  # Plage d'ann√©es disponibles
    index=10  # Par d√©faut : 2020
)

# Rebalancement pour l'ann√©e s√©lectionn√©e
st.subheader(f"üìà Rebalancement de l'Indice jusqu'√† l'ann√©e {selected_year}")

# V√©rifie les donn√©es qualitatives n√©cessaires
if any(qualitativ_data_by_year[year] is None for year in range(2010, selected_year + 1) if year in available_years):
    st.error("Certaines donn√©es qualitatives n√©cessaires pour le rebalancement ne sont pas disponibles.")
else:
    # Applique le rebalancement multiple
    index_energy_rebalanced = rebalance_multiple_years(
        index_energy, selected_year, 
        spx_prices, sxxp_prices, spx_tickers, sxxp_tickers, forex_data, qualitativ_data_by_year
    )

    # Visualisation
    st.subheader(f"üìà √âvolution de l'Indice sectoriel '{secteur_choisi}' apr√®s Rebalancement ({selected_year})")
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(
        index_energy_rebalanced['Dates'],
        index_energy_rebalanced['Index_Value'],
        label=f"Indice sectoriel '{secteur_choisi}' Rebalanc√©",
        color="purple",
        linewidth=2
    )
    ax.set_title(f"√âvolution de l'Indice sectoriel '{secteur_choisi}' pour l'ann√©e ({selected_year})", fontsize=16)
    ax.set_xlabel("Dates", fontsize=12)
    ax.set_ylabel("Valeur Normalis√©e (Base 100)", fontsize=12)
    ax.legend(fontsize=12)
    ax.grid(True, linestyle='--', alpha=0.6)
    st.pyplot(fig)

    # Enregistrement du graphique
    filename = f"indice_sectoriel_{secteur_choisi.replace(' ', '_').lower()}_rebalancement_{selected_year}.png"
    save_figure(fig, filename)


# Titre principal
st.title("üèÜ Cr√©ation et Analyse d'un Indice de Solidit√© Financi√®re")

st.markdown("""
Dans cette section, nous allons construire un **indice de solidit√© financi√®re** bas√© sur les fondamentaux des entreprises.  
Cet indice sera calcul√© en attribuant un **score composite** √† chaque entreprise, en tenant compte de plusieurs m√©triques financi√®res cl√©s, 
telles que les ratios financiers et les rendements. L'objectif est d'√©valuer la robustesse financi√®re des entreprises et d'analyser les tendances associ√©es.
""")

# Objectif de l'analyse
st.subheader("üéØ Objectif")
st.markdown("""
L'objectif de cette analyse est de cr√©er un indice sectoriel refl√©tant la **solidit√© financi√®re** des entreprises s√©lectionn√©es.  
En √©tudiant cet indice, nous pourrons :
- Identifier les entreprises les plus solides financi√®rement.
- Analyser la performance et la volatilit√© des entreprises les plus stables.
- Comparer les tendances de solidit√© financi√®re au sein d'un secteur donn√©.
""")

# M√©thodologie et Formules
st.subheader("üìö M√©thodologie et Formules")
st.markdown(r"""
Nous utilisons les m√©triques suivantes pour calculer un **score composite** :  

1. **PX_TO_BOOK (Price-to-Book Ratio)** :  
   $$ 
   \text{Norm\_PX\_TO\_BOOK}_i = 
   \frac{\text{PX\_TO\_BOOK}_i - \min(\text{PX\_TO\_BOOK})}
        {\max(\text{PX\_TO\_BOOK}) - \min(\text{PX\_TO\_BOOK})} 
   $$

2. **PE_RATIO (Price-to-Earnings Ratio)** :  
   Nous utilisons l'inverse de ce ratio pour privil√©gier les entreprises sous-√©valu√©es :  
   $$ 
   \text{Norm\_PE\_RATIO\_Inv}_i = 
   \frac{\frac{1}{\text{PE\_RATIO}_i} - \min\left(\frac{1}{\text{PE\_RATIO}}\right)}
        {\max\left(\frac{1}{\text{PE\_RATIO}}\right) - \min\left(\frac{1}{\text{PE\_RATIO}}\right)} 
   $$

3. **CUR_MKT_CAP (Capitalisation Boursi√®re)** :  
   $$ 
   \text{Norm\_CUR\_MKT\_CAP}_i = 
   \frac{\text{CUR\_MKT\_CAP}_i - \min(\text{CUR\_MKT\_CAP})}
        {\max(\text{CUR\_MKT\_CAP}) - \min(\text{CUR\_MKT\_CAP})} 
   $$

4. **EQY_DVD_YLD (Rendement des Dividendes)** :  
   $$ 
   \text{Norm\_EQY\_DVD\_YLD}_i = 
   \frac{\text{EQY\_DVD\_YLD}_i - \min(\text{EQY\_DVD\_YLD})}
        {\max(\text{EQY\_DVD\_YLD}) - \min(\text{EQY\_DVD\_YLD})} 
   $$

### Formule du Score :
$$
\text{Score}_i = 
0.25 \cdot \text{Norm\_PX\_TO\_BOOK}_i + 
0.25 \cdot \text{Norm\_PE\_RATIO\_Inv}_i + 
0.30 \cdot \text{Norm\_CUR\_MKT\_CAP}_i + 
0.20 \cdot \text{Norm\_EQY\_DVD\_YLD}_i
$$
""")


st.markdown("""### √âtapes cl√©s de l'analyse
1. **Filtrage des entreprises** : Les entreprises avec des donn√©es manquantes pour les m√©triques cl√©s sont exclues.
2. **Calcul des scores normalis√©s** : Chaque m√©trique est normalis√©e entre 0 et 1 pour assurer une pond√©ration √©quitable.
3. **Construction de l'indice** : Les scores composites sont utilis√©s pour calculer les pond√©rations des entreprises dans l'indice.
4. **Analyse des performances** : L'indice est analys√© pour √©valuer ses rendements, sa volatilit√© et sa stabilit√© par rapport aux benchmarks.
""")

# Fonction pour calculer les scores et afficher les r√©sultats 
def calcul_score(qualitativ_data, px_to_book, pe_ratio, cur_mkcap, eqy_dvd):
    """
    Calcule le score bas√© sur les fondamentaux pour chaque entreprise de la feuille "qualitativ_data".
    Exclut les entreprises ayant des crit√®res manquants et affiche combien d'entreprises sont exclues.

    Arguments :
    qualitativ_data : DataFrame contenant les donn√©es fondamentales (PX_TO_BOOK, PE_RATIO, etc.).
    px_to_book, pe_ratio, cur_mkcap, eqy_dvd : Valeurs entre 0 et 1 pour pond√©rer le score √† notre guise.
    
    Retour :
    DataFrame contenant les tickers et leurs scores, avec affichage des exclusions dans Streamlit.
    """

    # Renomme les colonnes pour correspondre aux attentes
    qualitativ_data.rename(columns={
        'PX_TO_BOOK': 'PX_TO_BOOK_RATIO',
        'EQY_DVD_YLD': 'EQY_DVD_YLD_IND',
        'Ticker': 'Ticker' 
    }, inplace=True)

    # Remplace les virgules par des points et convertir en num√©rique
    cols_to_convert = ['PX_TO_BOOK_RATIO', 'PE_RATIO', 'CUR_MKT_CAP', 'EQY_DVD_YLD_IND']
    for col in cols_to_convert:
        qualitativ_data[col] = qualitativ_data[col].replace(',', '.', regex=True).replace('#N/A N/A', None)
        qualitativ_data[col] = pd.to_numeric(qualitativ_data[col], errors='coerce')

    # V√©rification et filtrage des colonnes manquantes
    columns = ['Ticker', 'PX_TO_BOOK_RATIO', 'PE_RATIO', 'CUR_MKT_CAP', 'EQY_DVD_YLD_IND']
    filtered_data = qualitativ_data.dropna(subset=columns).copy()
    excluded_count = len(qualitativ_data) - len(filtered_data)
    st.write(f"üìâ **Nombre d'entreprises exclues pour crit√®res manquants :** {excluded_count}")

    # Calcul des normalisations pour chaque crit√®re
    filtered_data['Norm_PX_TO_BOOK'] = (
        (filtered_data['PX_TO_BOOK_RATIO'] - filtered_data['PX_TO_BOOK_RATIO'].min()) /
        (filtered_data['PX_TO_BOOK_RATIO'].max() - filtered_data['PX_TO_BOOK_RATIO'].min())
    )

    filtered_data['Norm_PE_RATIO_Inv'] = (
        (1 / filtered_data['PE_RATIO'] - (1 / filtered_data['PE_RATIO']).min()) /
        ((1 / filtered_data['PE_RATIO']).max() - (1 / filtered_data['PE_RATIO']).min())
    )

    filtered_data['Norm_CUR_MKT_CAP'] = (
        (filtered_data['CUR_MKT_CAP'] - filtered_data['CUR_MKT_CAP'].min()) /
        (filtered_data['CUR_MKT_CAP'].max() - filtered_data['CUR_MKT_CAP'].min())
    )

    filtered_data['Norm_EQY_DVD_YLD_IND'] = (
        (filtered_data['EQY_DVD_YLD_IND'] - filtered_data['EQY_DVD_YLD_IND'].min()) /
        (filtered_data['EQY_DVD_YLD_IND'].max() - filtered_data['EQY_DVD_YLD_IND'].min())
    )

    # Calcul des scores
    filtered_data['Score'] = (
        px_to_book * filtered_data['Norm_PX_TO_BOOK'] +
        pe_ratio * filtered_data['Norm_PE_RATIO_Inv'] +
        cur_mkcap * filtered_data['Norm_CUR_MKT_CAP'] +
        eqy_dvd * filtered_data['Norm_EQY_DVD_YLD_IND']
    )

    # Tri des r√©sultats
    result = filtered_data[['Ticker', 'Score']].sort_values(by="Score", ascending=False)

    # Affichage du r√©sultat
    st.write("üî¢ **Scores calcul√©s pour les entreprises :**")
    st.dataframe(result)

    return result

# Fonction pour calculer les poids
def weights_scores(score_data, top_n='all'):
    """
    Calcule les poids normalis√©s bas√©s sur les scores calcul√©s pour chaque entreprise.
    Peut limiter le nombre d'entreprises conserv√©es aux top_n scores les plus √©lev√©s.
    """
    if top_n != 'all':
        score_data = score_data.nlargest(top_n, 'Score')

    total_score = score_data['Score'].sum()
    score_data['Weight'] = score_data['Score'] / total_score

    return score_data[['Ticker', 'Weight']].sort_values(by="Weight", ascending=False)

# Initialisation des poids par d√©faut
default_weights = {"PX_TO_BOOK": 0.25, "PE_RATIO": 0.25, "CUR_MKT_CAP": 0.30, "EQY_DVD_YLD": 0.20}

# Section interactive pour les poids
st.subheader("‚öñÔ∏è D√©finir les poids pour le calcul des scores")
st.markdown("""
Personnalisez les poids pour chaque crit√®re. La somme des poids doit √™tre √©gale √† 1.  
Par d√©faut, les valeurs sont :  
- PX_TO_BOOK : 0.25  
- PE_RATIO : 0.25  
- CUR_MKT_CAP : 0.30  
- EQY_DVD_YLD : 0.20
""")

reset_clicked = st.button("üîÑ R√©initialiser aux valeurs par d√©faut")

if reset_clicked:
    px_to_book = default_weights["PX_TO_BOOK"]
    pe_ratio = default_weights["PE_RATIO"]
    cur_mkcap = default_weights["CUR_MKT_CAP"]
    eqy_dvd = default_weights["EQY_DVD_YLD"]
    st.success("Les poids ont √©t√© r√©initialis√©s aux valeurs par d√©faut.")
else:
    px_to_book = st.slider("Poids pour PX_TO_BOOK (Price-to-Book Ratio)", 0.0, 1.0, default_weights["PX_TO_BOOK"], step=0.01)
    pe_ratio = st.slider("Poids pour PE_RATIO (Price-to-Earnings Ratio)", 0.0, 1.0, default_weights["PE_RATIO"], step=0.01)
    cur_mkcap = st.slider("Poids pour CUR_MKT_CAP (Capitalisation Boursi√®re)", 0.0, 1.0, default_weights["CUR_MKT_CAP"], step=0.01)
    eqy_dvd = st.slider("Poids pour EQY_DVD_YLD (Rendement des Dividendes)", 0.0, 1.0, default_weights["EQY_DVD_YLD"], step=0.01)

# V√©rification des poids
total_weights = px_to_book + pe_ratio + cur_mkcap + eqy_dvd
if total_weights != 1.0:
    st.error(f"La somme des poids doit √™tre √©gale √† 1. Actuellement : {total_weights:.2f}")
    st.stop()

# Calcul des scores
st.success(f"Les poids d√©finis sont valides. La somme des poids est {total_weights:.2f}.")
score = calcul_score(donnees['qualitativ_2018'], px_to_book, pe_ratio, cur_mkcap, eqy_dvd)

# Section interactive pour le nombre d'entreprises
st.subheader("‚öôÔ∏è Param√®tres de s√©lection des entreprises")
total_companies = len(score)
top_n = st.slider(
    "Nombre d'entreprises √† s√©lectionner (Top N)",
    min_value=10,
    max_value=total_companies,
    value=10,
    step=1
)
if top_n == total_companies:
    st.write("‚ö†Ô∏è Toutes les entreprises disponibles seront incluses dans l'indice.")
else:
    st.write(f"Les {top_n} meilleures entreprises seront s√©lectionn√©es.")

# Calcul des poids pour les entreprises s√©lectionn√©es
weight_score = weights_scores(score, top_n=top_n)
st.write("‚öñÔ∏è **Poids des entreprises s√©lectionn√©es :**")
st.dataframe(weight_score)

# Titre principal de l'application
st.title("üìà Analyse et Rebalancement Dynamique ")

# Chargement des donn√©es essentielles
forex_data = donnees['forex_data']
spx_prices = donnees['spx_prices']
sxxp_prices = donnees['sxxp_prices']

# √âtape 1 : Filtrage des entreprises avec tous les fondamentaux disponibles
st.subheader("üîç Filtrage des entreprises valides")

# R√©cup√®re les tickers avec des scores calcul√©s
tickers_score = list(weight_score.iloc[:, 0])

# Section interactive pour afficher ou masquer les tickers s√©lectionn√©s
with st.expander("Afficher les tickers s√©lectionn√©s"):
    st.write("**Tickers s√©lectionn√©s :**")
    st.write(tickers_score)


# √âtape 2 : Filtrer les prix en fonction des tickers et des dates
st.subheader("üìä Filtrage des prix sur une p√©riode donn√©e")
start_date = st.date_input("S√©lectionnez une date de d√©but :", value=pd.to_datetime('2010-04-01'))
end_date = st.date_input("S√©lectionnez une date de fin :", value=pd.to_datetime('2018-12-28'))

# Filtrage des prix pour SPX
spx_score_prices, spx_excluded = filter_prices(spx_prices, tickers_score, start_date, end_date)

with st.expander("Afficher les tickers exclus pour SPX"):
    st.write("**Tickers exclus pour SPX :**", spx_excluded)

with st.expander("Afficher les prix filtr√©s pour SPX"):
    st.write("**Prix filtr√©s pour SPX :**")
    st.dataframe(spx_score_prices)

# Filtrage des prix pour SXXP
sxxp_score_prices, sxxp_excluded = filter_prices(sxxp_prices, tickers_score, start_date, end_date)
with st.expander("Afficher les tickers exclus pour SXXP"):
    st.write("**Tickers exclus pour SXXP :**", sxxp_excluded)

with st.expander("Afficher les prix filtr√©s pour SXXP"):
    st.write("**Prix filtr√©s pour SXXP :**")
    st.dataframe(sxxp_score_prices) 


# √âtape 3 : Conversion des prix SXXP en dollars
st.subheader("üíµ Conversion des prix SXXP en dollars")
sxxp_score_prices_usd = convert_usd(sxxp_score_prices, forex_data)
st.write("**Prix convertis en dollars :**")
st.dataframe(sxxp_score_prices_usd)

# √âtape 4 : Fusion des prix SPX et SXXP
st.subheader("üîó Fusion des prix SPX et SXXP")
score_prices = merge_dates(spx_score_prices, sxxp_score_prices_usd)
st.write("**Prix fusionn√©s :**")
st.dataframe(score_prices)

# √âtape 5 : Normalisation des prix
st.subheader("üìè Normalisation des prix")
score_prices_normalize = normalize_prices(score_prices)
st.write("**Prix normalis√©s :**")
st.dataframe(score_prices_normalize)

# √âtape 6 : Construction de l'indice bas√© sur les scores
st.subheader("‚öôÔ∏è Construction de l'indice bas√© sur les scores")
index_score = construct_index(score_prices_normalize, weight_score)
st.write("**Indice de style construit :**")
st.dataframe(index_score)

# Visualisation de l'indice avant rebalancement
st.subheader("üìà Visualisation de l'indice avant rebalancement")
fig_before, ax_before = plt.subplots(figsize=(10, 5))
ax_before.plot(index_score['Dates'], index_score['Index_Value'], label='Indice Avant Rebalancement', color="blue", linewidth=2)
ax_before.set_title("Indice Avant Rebalancement", fontsize=14)
ax_before.set_xlabel("Dates", fontsize=12)
ax_before.set_ylabel("Valeur de l'Indice", fontsize=12)
ax_before.legend(fontsize=12)
ax_before.grid(True, linestyle='--', alpha=0.6)

# Affichage 
st.pyplot(fig_before)

# Enregistrement du graphique avant rebalancement
filename_before = "indiceII_avant_rebalancement.png"
save_figure(fig_before, filename_before)

st.subheader("üìä Analyse des statistiques de l'indice avant rebalancement")
stats_df, alpha, beta, merged_data = stats_index(index_score)

if stats_df is not None:
    # Enregistrer les statistiques dans un fichier PNG
    stats_filename_before = "temp_reports/Statistiques_IndiceII_Avant_Rebalancement.png"

    # Appel unique avec tous les arguments
    analyze_statistics_and_alpha(
        stats_df=stats_df,
        filename=stats_filename_before,
        merged_data=merged_data,
        alpha_value=alpha,
        beta_value=beta
    )
else:
    st.error("‚ùå Impossible de calculer les statistiques avant rebalancement.")

# √âtape 8 : Rebalancement dynamique de l'indice
st.subheader(f"üìà Rebalancement de l'Indice jusqu'√† l'ann√©e {selected_year}")
if selected_year not in available_years:
    st.error(f"Donn√©es qualitatives indisponibles pour l'ann√©e {selected_year}. Veuillez s√©lectionner une autre ann√©e.")
else:
    index_energy_rebalanced = rebalance_multiple_years(
        index_score, selected_year, 
        spx_prices, sxxp_prices, tickers_score, tickers_score, forex_data, qualitativ_data_by_year
    )
    st.write(f"**Indice rebalanc√© jusqu'√† l'ann√©e {selected_year} :**")
    
    # Visualisation de l'indice apr√®s rebalancement
    st.subheader("üìà Visualisation de l'indice apr√®s rebalancement")
    fig_after, ax_after = plt.subplots(figsize=(10, 5))
    ax_after.plot(index_energy_rebalanced['Dates'], index_energy_rebalanced['Index_Value'], label='Indice Apr√®s Rebalancement', color="green", linewidth=2)
    ax_after.set_title("Indice Apr√®s Rebalancement", fontsize=14)
    ax_after.set_xlabel("Dates", fontsize=12)
    ax_after.set_ylabel("Valeur de l'Indice", fontsize=12)
    ax_after.legend(fontsize=12)
    ax_after.grid(True, linestyle='--', alpha=0.6)

    # Affichage 
    st.pyplot(fig_after)
    # Enregistrement du graphique apr√®s rebalancement
filename_after = "indiceII_apres_rebalancement.png"
save_figure(fig_after, filename_after)
st.dataframe(index_energy_rebalanced)

# √âtape 9 : Analyse des statistiques apr√®s rebalancement
st.subheader("üìä Analyse des statistiques de l'indice apr√®s rebalancement")
stats_df_rebalanced, alpha_rebalanced, beta_rebalanced, merged_data_rebalanced = stats_index(index_energy_rebalanced)

if stats_df_rebalanced is not None:
    stats_filename_after = "temp_reports/Statistiques_IndiceII_Apres_Rebalancement.png"
    analyze_statistics_and_alpha(
        stats_df=stats_df_rebalanced,
        filename=stats_filename_after, 
        merged_data=merged_data_rebalanced,
        alpha_value=alpha_rebalanced,
        beta_value=beta_rebalanced
    )
else:
    st.error("‚ùå Impossible de calculer les statistiques apr√®s rebalancement.")

# Fonction pour rebalancer les ann√©es disponibles √† partir de 2019
def rebalance_multiple_years(initial_index, end_year, spx_prices, sxxp_prices, spx_tickers, sxxp_tickers, forex_data, qualitativ_data_by_year):
    """
    Rebalance l'indice sectoriel successivement pour les ann√©es disponibles, en commen√ßant √† partir de 2019.
    
    Args:
    - initial_index (pd.DataFrame): L'indice initial avant le rebalancement.
    - end_year (int): Ann√©e s√©lectionn√©e pour le rebalancement.
    - spx_prices, sxxp_prices (pd.DataFrame): Donn√©es des prix SPX et SXXP.
    - spx_tickers, sxxp_tickers (list): Tickers des indices SPX et SXXP.
    - forex_data (pd.DataFrame): Donn√©es Forex pour la conversion des devises.
    - qualitativ_data_by_year (dict): Donn√©es qualitatives disponibles par ann√©e.
    
    Returns:
    - pd.DataFrame: Indice sectoriel rebalanc√©.
    """
    index = initial_index.copy()

    for year in sorted(qualitativ_data_by_year.keys()):
        if year < 2019:  # Ignorer les ann√©es avant 2019
            continue
        if year > end_year:
            break  # Stop si on d√©passe l'ann√©e s√©lectionn√©e

        qualitativ_for_year = qualitativ_data_by_year.get(year)
        if qualitativ_for_year is None:
            st.warning(f"Donn√©es qualitatives manquantes pour l'ann√©e {year}.")
            continue

        # Traite les prix pour l'ann√©e en cours
        prices_for_year = process_prices_year(spx_prices, sxxp_prices, spx_tickers, sxxp_tickers, forex_data, year)
        if prices_for_year.empty:
            st.warning(f"Pas de donn√©es disponibles pour les prix de l'ann√©e {year}.")
            continue

        # Applique le rebalancement pour l'ann√©e
        index = rebalance_index(index, prices_for_year, qualitativ_for_year)

    return index

# V√©rification et application du rebalancement
if selected_year not in available_years:
    st.error(f"Donn√©es qualitatives indisponibles pour l'ann√©e {selected_year}. Veuillez s√©lectionner une autre ann√©e.")
else:
    # Utiliser l'indice jusqu'√† fin 2018 comme point de d√©part
    index_energy_rebalanced = rebalance_multiple_years(
        index_score, selected_year,  # Utilise `index_score` comme base, inchang√© avant 2019
        spx_prices, sxxp_prices, tickers_score, tickers_score, forex_data, qualitativ_data_by_year
    )


# Analyse des R√©sultats
st.subheader("üìù Analyse des R√©sultats de l'Indice")

# Avant le Rebalancement
with st.expander("üîç Avant le Rebalancement", expanded=False):
    st.markdown("""
    Avant le rebalancement, l‚Äôindice initial montre une croissance notable sur la p√©riode 2010-2019, 
    avec un **rendement total de 159,08%** et un **rendement annualis√© de 11,7%**. Cependant, cette performance est accompagn√©e 
    d‚Äôune **volatilit√© annualis√©e √©lev√©e de 16,12%**, refl√©tant une exposition aux entreprises de tous secteurs, sensibles 
    aux fluctuations des march√©s globaux.
    
    La baisse significative observ√©e en 2018 refl√®te des tensions macro√©conomiques majeures, notamment :
    - **Guerre commerciale sino-am√©ricaine** : L'administration Trump a initi√© des hausses de droits de douane, suscitant des incertitudes.
    - **Craintes d'un ralentissement √©conomique mondial** : Les march√©s ont anticip√© un essoufflement de l'√©conomie, influen√ßant n√©gativement les indices.
    - **Politiques mon√©taires restrictives** : La R√©serve f√©d√©rale am√©ricaine a relev√© ses taux d'int√©r√™t, renfor√ßant l'aversion au risque.

    Ces facteurs ont contribu√© √† une volatilit√© accrue et √† une baisse des march√©s financiers en 2018.
    """)

# Apr√®s le Rebalancement
with st.expander("üîç Apr√®s le Rebalancement", expanded=False):
    st.markdown("""
    Apr√®s le rebalancement en 2019, l‚Äôindice gagne en stabilit√© et affiche une **performance renforc√©e**. En se concentrant 
    sur les **10 meilleures entreprises** s√©lectionn√©es parmi tous les secteurs, le rendement total passe √† **264,19%**, 
    avec un **rendement annualis√© de 13,01%**. 
    
    La **volatilit√© annualis√©e** augmente l√©g√®rement √† **18,24%**, mais cela s‚Äôaccompagne d‚Äôune am√©lioration des rendements. 
    Ce r√©sultat montre que l‚Äôapproche bas√©e sur les fondamentaux reste robuste m√™me face √† une s√©lection restreinte.
    """)

st.subheader("üìä R√©sum√© Visuel")
with st.expander("üìà Visualisation des Graphiques", expanded=False):
    st.markdown("""
    Les graphiques affich√©s plus haut montrent l‚Äô√©volution de l‚Äôindice avant et apr√®s rebalancement.  
    Avant 2019, l‚Äôindice pr√©sente des fluctuations importantes avec des pics et des creux marqu√©s, notamment une chute significative en 2018.  
    Cependant, juste apr√®s cette chute, les cours montrent une reprise rapide, illustrant la r√©silience du march√© et les opportunit√©s 
    offertes par les fondamentaux solides des entreprises.

    Apr√®s le rebalancement, la trajectoire devient plus r√©guli√®re, indiquant que les ajustements bas√©s sur les fondamentaux des entreprises 
    ont permis une meilleure capture des opportunit√©s de march√© tout en limitant les impacts des fluctuations importantes.
    """)


# Conclusion
st.subheader("üìà Conclusion")
st.markdown("""
En conclusion, l‚Äôanalyse des **10 meilleures entreprises**, ind√©pendamment du secteur, montre que le rebalancement a permis 
d'am√©liorer les rendements de l'indice tout en g√©rant efficacement les risques associ√©s. Cela met en lumi√®re l‚Äôimportance 
de s√©lectionner des entreprises solides financi√®rement, avec des pond√©rations dynamiques, pour optimiser les performances d‚Äôun indice global.
""")


# Section Momentum
st.title("üìà Cr√©ation d'un Indice de Style Momentum")
st.markdown("""
Le style d‚Äôinvestissement **Momentum** repose sur l'id√©e selon laquelle les entreprises qui ont r√©cemment surperform√© continueront √† g√©n√©rer de bonnes performances dans un futur proche. 
Ce style s‚Äôappuie sur un principe cl√© des march√©s financiers‚ÄØ: les tendances peuvent persister, notamment gr√¢ce au comportement des investisseurs qui suivent ces mouvements.

### Objectif de cette analyse
Dans cette section, nous allons construire un **indice de style Momentum**, en identifiant les entreprises qui ont obtenu les meilleurs rendements au cours d‚Äôune p√©riode donn√©e. 
Les √©tapes principales comprennent‚ÄØ:
1. La s√©lection des entreprises en fonction de leurs rendements cumul√©s.
2. L‚Äôattribution de pond√©rations bas√©es soit sur des scores proportionnels au rendement, soit de mani√®re √©quivalente.
3. La cr√©ation d‚Äôun indice qui refl√®te la performance de ces entreprises Momentum.

### M√©thodologie
1. **Calcul des rendements cumul√©s**‚ÄØ: Nous utilisons les prix historiques des entreprises pour calculer leurs rendements cumul√©s sur une p√©riode donn√©e (param√©trable). Ces rendements serviront de base pour s√©lectionner les entreprises Momentum.
2. **S√©lection des meilleures entreprises**‚ÄØ: Un pourcentage des entreprises ayant les meilleurs rendements sera retenu pour construire l‚Äôindice.
3. **Pond√©rations des entreprises**‚ÄØ:
    - **Pond√©ration √©quivalente**‚ÄØ: Chaque entreprise s√©lectionn√©e contribue de mani√®re √©gale √† l‚Äôindice.
    - **Pond√©ration bas√©e sur les scores Momentum**‚ÄØ: Les entreprises ayant des rendements plus √©lev√©s obtiennent une pond√©ration plus importante.
4. **Benchmarking**‚ÄØ: L‚Äôindice Momentum sera compar√© aux benchmarks globaux SPX et SXXP pour √©valuer sa performance relative.

### Pourquoi le Momentum‚ÄØ?
Le style Momentum est particuli√®rement int√©ressant dans des march√©s caract√©ris√©s par des tendances fortes. Il est souvent utilis√© dans des strat√©gies quantitatives car il repose sur des calculs objectifs et reproductibles. Cependant, ce style peut √™tre sensible aux retournements soudains de march√©, ce qui en fait une strat√©gie dynamique n√©cessitant une gestion rigoureuse.

### R√©sultat attendu
L‚Äôindice Momentum ainsi cr√©√© nous permettra de visualiser‚ÄØ:
- La capacit√© des entreprises Momentum √† surperformer sur une p√©riode donn√©e.
- La comparaison avec des benchmarks pour juger de la pertinence de cette strat√©gie dans diff√©rents contextes de march√©.
""")


# Param√®tres interactifs pour l'indice Momentum
momentum_period = st.number_input(
    "P√©riode de calcul du Momentum (en mois) :", min_value=1, max_value=24, value=6, key="momentum_period"
)
top_percent = st.slider(
    "Pourcentage des entreprises √† inclure dans l'indice :", min_value=10, max_value=100, value=30, key="momentum_top_percent"
)
start_date = st.date_input("Date de d√©but", value=pd.to_datetime('2010-04-01'), key="momentum_start_date")
end_date = st.date_input("Date de fin", value=pd.to_datetime('2018-12-28'), key="momentum_end_date")

try:
    # √âtape 1 : Applique filter_prices √† toutes les entreprises
    all_spx_tickers = spx_prices.columns[1:]  # Tous les tickers SPX (exclut la colonne Dates)
    all_sxxp_tickers = sxxp_prices.columns[1:]  # Tous les tickers SXXP (exclut la colonne Dates)

    spx_filtered, spx_excluded = filter_prices(spx_prices, all_spx_tickers, start_date, end_date)
    sxxp_filtered, sxxp_excluded = filter_prices(sxxp_prices, all_sxxp_tickers, start_date, end_date)

    if spx_filtered.empty or sxxp_filtered.empty:
        st.error("Les donn√©es filtr√©es pour SPX ou SXXP sont vides. V√©rifiez vos dates ou tickers.")
        st.stop()

    # V√©rification des doublons dans les colonnes des DataFrames filtr√©s
    spx_filtered = spx_filtered.loc[:, ~spx_filtered.columns.duplicated()]
    sxxp_filtered = sxxp_filtered.loc[:, ~sxxp_filtered.columns.duplicated()]

    # √âtape 2 : Conversion des prix SXXP en dollars
    sxxp_usd = convert_usd(sxxp_filtered, forex_data)

    # V√©rification des doublons apr√®s conversion
    sxxp_usd = sxxp_usd.loc[:, ~sxxp_usd.columns.duplicated()]

    # √âtape 3 : Fusionner les prix SPX et SXXP
    combined_prices = merge_dates(spx_filtered, sxxp_usd)

    # Suppression des colonnes dupliqu√©es dans les donn√©es fusionn√©es
    if combined_prices.columns.duplicated().any():
        st.warning("Des colonnes dupliqu√©es ont √©t√© d√©tect√©es et supprim√©es.")
        combined_prices = combined_prices.loc[:, ~combined_prices.columns.duplicated()]

    if combined_prices.empty:
        st.error("Les donn√©es combin√©es pour SPX et SXXP sont vides. V√©rifiez vos filtres ou donn√©es d'entr√©e.")
        st.stop()

    # √âtape 4 : Normalisation des prix
    normalized_prices = normalize_prices(combined_prices)

    # V√©rification des donn√©es apr√®s normalisation
    st.write("üìä **Aper√ßu des donn√©es apr√®s traitement et normalisation :**")
    st.dataframe(normalized_prices.head())

    # Gestion des colonnes constantes ou dupliqu√©es
    constant_cols = normalized_prices.loc[:, (normalized_prices.nunique() <= 1)]
    if not constant_cols.empty:
        st.warning(f"Certaines colonnes sont constantes (ou vides) : {list(constant_cols.columns)}")
        normalized_prices = normalized_prices.drop(columns=constant_cols.columns)

    if normalized_prices.columns.duplicated().any():
        st.warning("Des colonnes dupliqu√©es ont √©t√© d√©tect√©es et supprim√©es dans les donn√©es normalis√©es.")
        normalized_prices = normalized_prices.loc[:, ~normalized_prices.columns.duplicated()]

    if normalized_prices.shape[1] <= 1:
        st.error("Aucune colonne valide disponible apr√®s la normalisation. V√©rifiez les donn√©es d'entr√©e.")
        st.stop()

    # √âtape 5 : Calcul des rendements cumul√©s
    st.subheader("üìä Calcul des rendements cumul√©s")
    try:
        momentum_returns = normalized_prices.set_index('Dates').copy()

        if momentum_returns.empty:
            raise ValueError("Les donn√©es normalis√©es sont vides. Impossible de calculer les rendements.")

        daily_returns = momentum_returns.pct_change().add(1)
        daily_returns = daily_returns.fillna(1)

        rolling_returns = daily_returns.rolling(window=momentum_period * 21, min_periods=1)
        momentum_cum_returns = rolling_returns.apply(np.prod, raw=True) - 1

        if momentum_cum_returns.isna().all(axis=None):
            raise ValueError("Toutes les colonnes des rendements cumul√©s sont None. V√©rifiez les donn√©es.")

        st.write("üîç **Rendements cumul√©s calcul√©s :**")
        st.dataframe(momentum_cum_returns.head())

    except Exception as e:
        st.error(f"Erreur : {e}")
        st.stop()

    # √âtape 6 : S√©lection des entreprises Momentum
    st.subheader("‚öñÔ∏è S√©lection des entreprises Momentum")
    if not momentum_cum_returns.empty:
        momentum_sorted = momentum_cum_returns.iloc[-1].sort_values(ascending=False)
        st.write("üîç **Scores Momentum tri√©s :**")
        st.dataframe(momentum_sorted)

        top_n = int(len(momentum_sorted) * (top_percent / 100))
        if top_n <= 0:
            st.error("Le pourcentage des entreprises s√©lectionn√©es est trop faible. Augmentez le pourcentage.")
            st.stop()

        selected_tickers = list(dict.fromkeys(momentum_sorted.head(top_n).index.tolist()))
        st.write(f"**Entreprises s√©lectionn√©es ({top_percent}% des meilleures performances) :**")
        st.write(selected_tickers)

        # √âtape 7 : Calcul des pond√©rations Momentum
        st.subheader("üìè Calcul des pond√©rations Momentum")

        if not momentum_sorted.empty:
            selected_scores = momentum_sorted.loc[selected_tickers]

            valid_tickers = list(set(selected_scores.index) & set(momentum_returns.columns))
            if not valid_tickers:
                st.error("Aucun ticker valide trouv√© pour construire l'indice Momentum.")
                st.stop()

            selected_scores = selected_scores.loc[valid_tickers]
            st.write(f"üìä **Tickers valides apr√®s filtrage** : {len(valid_tickers)} entreprises.")
            st.dataframe(selected_scores)

            weighting_strategy = st.radio(
                "Strat√©gie de pond√©ration",
                ("Pond√©ration √©quivalente", "Pond√©ration bas√©e sur le score Momentum"),
                index=1
            )

            weights = pd.Series(1 / len(selected_scores), index=selected_scores.index) if weighting_strategy == "Pond√©ration √©quivalente" else selected_scores / selected_scores.sum()

            try:
                momentum_prices = momentum_returns[valid_tickers]
                momentum_index_values = (momentum_prices * weights.values).sum(axis=1)
                momentum_index = pd.DataFrame({
                    'Dates': momentum_prices.index,
                    'Index_Value': (momentum_index_values / momentum_index_values.iloc[0]) * 100
                }).reset_index(drop=True)

                st.subheader("üìà Visualisation de l'indice Momentum avec Benchmarks")

                try:
                    index_data = donnees['index_data']
                    forex_data = donnees['forex_data']

                    spx_index = prepare_reference_index(index_data, "SPX Index")
                    sxxp_index = prepare_reference_index(index_data, "SXXP Index")
                    sxxp_index_usd = convert_usd(sxxp_index, forex_data)

                    index_with_benchmarks = pd.merge(momentum_index, spx_index, on='Dates', how='inner', suffixes=('', '_SPX'))
                    index_with_benchmarks = pd.merge(index_with_benchmarks, sxxp_index_usd, on='Dates', how='inner', suffixes=('', '_SXXP'))

                    columns_to_adjust = ['Index_Value', 'Index_Value_SPX', 'Index_Value_SXXP']
                    index_with_benchmarks = adjust_to_base_100(index_with_benchmarks, columns_to_adjust)

                    fig, ax = plt.subplots(figsize=(12, 6))
                    ax.plot(index_with_benchmarks['Dates'], index_with_benchmarks['Index_Value'], label="Indice Momentum", linewidth=2, color="blue")
                    ax.plot(index_with_benchmarks['Dates'], index_with_benchmarks['Index_Value_SPX'], label="Benchmark SPX", linestyle="--", color="orange")
                    ax.plot(index_with_benchmarks['Dates'], index_with_benchmarks['Index_Value_SXXP'], label="Benchmark SXXP (en USD)", linestyle=":", color="green")

                    ax.set_title("Indice Momentum avec Benchmarks (Normalis√©s √† 100)", fontsize=16)
                    ax.set_xlabel("Dates", fontsize=12)
                    ax.set_ylabel("Valeur Normalis√©e (Base 100)", fontsize=12)
                    ax.legend(fontsize=12)
                    ax.grid(True, linestyle='--', alpha=0.6)

                    save_figure(fig, "Indice_Momentum_Avec_Benchmark.png")
                    st.pyplot(fig)

                except Exception as e:
                    st.error(f"Erreur lors de la cr√©ation du graphique avec benchmarks : {e}")

            except Exception as e:
                st.error(f"Erreur lors de la construction de l'indice Momentum : {e}")

    else:
        st.error("Les rendements cumul√©s sont vides. Impossible de calculer les pond√©rations Momentum.")

except Exception as e:
    st.error(f"Erreur g√©n√©rale : {e}")
# √âtape 9 : Analyse des statistiques de l'indice Momentum
try:
    stats_df_momentum, alpha_momentum, beta_momentum, merged_data_momentum = stats_index(momentum_index)

    if stats_df_momentum is not None:
        st.write("‚úîÔ∏è Les statistiques principales de l'indice Momentum ont √©t√© calcul√©es.")
    else:
        st.error("‚ùå Impossible de calculer les statistiques de l'indice Momentum.")

    # √âtape 10 : Analyse approfondie des statistiques
    st.subheader("üìä Analyse approfondie des statistiques de l'indice Momentum")
    analyze_statistics_and_alpha(
        stats_df=stats_df_momentum,
        filename="temp_reports/Statistiques_Indice_Momentum.png",
        merged_data=merged_data_momentum,
        alpha_value=alpha_momentum,
        beta_value=beta_momentum
    )

except Exception as e:
    st.error(f"Erreur lors de l'analyse des statistiques : {e}")

# Analyse des R√©sultats de l'Indice Momentum
st.subheader("üìù Analyse des R√©sultats de l'Indice Momentum")

# Performances de l'Indice Momentum
with st.expander("üîç Performances de l'Indice Momentum", expanded=False):
    st.markdown("""
    L'indice Momentum, construit sur la p√©riode 2010-2019, affiche des performances remarquables :  
    - **Rendement total : 217,89%**  
    - **Rendement annualis√© : 14,39%**  
    - **Volatilit√© annualis√©e : 13,53%**  

    Cette performance est accompagn√©e d'un **Ratio de Sharpe de 1,06**, indiquant que l'indice offre des rendements satisfaisants par rapport aux risques encourus.

    En termes de risques, le **Max Drawdown** est limit√© √† **-19,36%**, ce qui refl√®te une r√©silience significative face aux baisses de march√©. Les entreprises s√©lectionn√©es, caract√©ris√©es par des tendances de performance solides, ont contribu√© √† cette stabilit√©.
    """)

# Comparaison avec les Benchmarks
with st.expander("üîç Comparaison avec les Benchmarks", expanded=False):
    st.markdown("""
    L'analyse comparative avec les benchmarks **SPX** et **SXXP** montre que l'indice Momentum surperforme ces derniers :  
    - **Benchmark SPX** : L'indice Momentum d√©passe constamment le SPX en termes de performance totale et annualis√©e.  
    - **Benchmark SXXP (en USD)** : Bien que le SXXP ait une volatilit√© plus faible, ses rendements sont significativement inf√©rieurs.  
      
    Ces r√©sultats d√©montrent la pertinence de la strat√©gie Momentum pour capturer les entreprises √† forte dynamique de croissance, tout en g√©rant efficacement les risques.
    """)

# R√©sum√© Visuel
st.subheader("üìä R√©sum√© Visuel")
with st.expander("üìà Visualisation des Graphiques", expanded=False):
    st.markdown("""
    Le graphique affich√© plus haut illustre l'√©volution de l'indice Momentum en comparaison avec les benchmarks :  
    - **Indice Momentum** : Une croissance marqu√©e avec une surperformance claire sur l'ensemble de la p√©riode.  
    - **SPX et SXXP** : Bien que ces indices suivent une trajectoire ascendante, leur performance est inf√©rieure √† celle de l'indice Momentum.  

    L'indice Momentum montre √©galement une meilleure r√©silience apr√®s les p√©riodes de correction, mettant en √©vidence l'importance d'une s√©lection rigoureuse des entreprises.
    """)

# Conclusion
st.subheader("üìà Conclusion")
st.markdown("""
En conclusion, l'indice Momentum offre des performances robustes gr√¢ce √† une strat√©gie bas√©e sur les entreprises ayant une forte dynamique.  
En surperformant les benchmarks traditionnels, il met en lumi√®re la pertinence d'une strat√©gie active pour optimiser les rendements tout en g√©rant efficacement les risques.
""")

st.title("üì§ Envoi d'analyse financi√®re par email")
st.subheader("‚úâÔ∏è Pr√©paration et pr√©-envoi de l'email")

# Variables pour l'email
destinataire = st.text_input("Adresse email du destinataire :", "destinataire@example.com")
sujet = "Analyse Financi√®re Personnalis√©e"
corps_message = f"""
Bonjour,

Voici l'analyse pour le secteur s√©lectionn√© : **{secteur_choisi}** 
et les sous-secteurs suivants : **{', '.join(sous_secteurs_choisis) or 'Aucun sous-secteur s√©lectionn√©'}**.

Partie 1 : Indices Sectoriels
- Indice sectoriel : Construit sur la base des donn√©es historiques normalis√©es √† une base de 100.
- Analyse par pays (optionnelle) : 
  Les pays s√©lectionn√©s pour cette analyse sont :  
  {', '.join(selected_countries) or 'Tous les pays inclus'}.
  Cet indice met en avant les performances sp√©cifiques √† chaque r√©gion g√©ographique.

Partie 2 : Indice de Solidit√© Financi√®re
Cet indice est calcul√© pour l'ensemble des entreprises, en se basant sur les crit√®res fondamentaux suivants :  
- Ratio Prix/Actif Net (Price-to-Book Ratio).  
- Ratio Cours/B√©n√©fices invers√© (Inverse Price-to-Earnings Ratio).  
- Rendement des Dividendes.  
- Capitalisation Boursi√®re.  

Partie 3 : Indice Momentum
Cet indice est construit pour l'ensemble des entreprises, en identifiant celles ayant les meilleures performances pass√©es sur une p√©riode d√©finie.  
Les pond√©rations des entreprises s√©lectionn√©es sont calcul√©es en fonction de leurs rendements cumul√©s.

Cordialement,  
"""

# Encode l'URL pour le lien mailto
mailto_link = f"mailto:{destinataire}?subject={urllib.parse.quote(sujet)}&body={urllib.parse.quote(corps_message)}"

if st.button("üì§ Ouvrir l'application de messagerie"):
    st.markdown(f"[Cliquez ici pour pr√©parer l'email]({mailto_link})", unsafe_allow_html=True)

if st.button("üì• T√©l√©charger les graphiques et r√©sultats"):
    zip_buffer = create_zip()
    zip_buffer.seek(0)

    st.download_button(
        label="üìÅ T√©l√©charger les r√©sultats (.zip)",
        data=zip_buffer,
        file_name="analyse_financiere.zip",
        mime="application/zip"
    )

